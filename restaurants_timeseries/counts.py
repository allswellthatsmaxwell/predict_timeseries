# AUTOGENERATED! DO NOT EDIT! File to edit: 01_view_data.ipynb (unless otherwise specified).

__all__ = ['VisitsSurveyor', 'vs', 'populated_store_id']

# Cell
from matplotlib import pyplot as plt
import seaborn as sns

#export
import restaurants_timeseries.core as core

# Cell
class VisitsSurveyor:
    def __init__(self, visits: core.pd.DataFrame, make_report: bool):
        self.make_report = make_report
        self.visits = visits
        self.assign_never_visited()
        self.filter_zero_periods()
        self.count_visited_days()

    def report(self, s: str):
        if self.make_report:
            if issubclass(type(s), core.pd.DataFrame):
                display(s)
            else:
                print(s)

    def assign_never_visited(self):
        self.store_counts = self.visits.groupby('air_store_id').visitors.sum()
        self.never_visited = self.store_counts[self.store_counts == 0]
        self.report("The visits data looks like this:")
        self.report(self.visits.head())
        self.report(" ")
        self.report(f"There are {len(self.store_counts)} stores.")
        self.report(f"{len(self.never_visited)} stores had no visits ever.")


    def filter_zero_periods(self):
        self.daily_total_visits = (
            self.visits
            [['visit_date', 'visitors']]
            .groupby('visit_date')
            .sum()
            .reset_index())
        earliest_day = self.daily_total_visits.query("visitors > 0").min().iloc[0]
        latest_day = self.daily_total_visits.query("visitors > 0").max().iloc[0]
        self.visits = self.visits[
            (self.visits.visit_date >= earliest_day) &
            (self.visits.visit_date <= latest_day)]
        self.report(f"Populated data is from {earliest_day} to {latest_day}.")

    def count_visited_days(self):
        self.visited_days_counts = (
            self.visits[self.visits.visitors > 0].
            groupby('air_store_id')['visitors'].
            count().
            reset_index(name='days_visited'))
        if self.make_report:
            plt.figure(figsize=(8, 4))
            (sns.histplot(data=self.visited_days_counts['days_visited']).
             set(title="How many stores were visited e.g. 300+ times?",
                 xlabel="days with at least 1 visit", ylabel="stores"))

# Cell
vs = VisitsSurveyor(core.data['visits'], False)
populated_store_id = vs.visited_days_counts.sort_values(by='days_visited', ascending=False).air_store_id[0]