# AUTOGENERATED! DO NOT EDIT! File to edit: 01_view_data.ipynb (unless otherwise specified).

__all__ = ['get_earliest_date', 'get_latest_date', 'VisitsSurveyor', 'vs', 'populated_store_id']

# Cell
from matplotlib import pyplot as plt
import seaborn as sns
import plotnine as pn
from mizani.formatters import date_format

#export
import restaurants_timeseries.core as core

# Cell
def get_earliest_date(dat):
    return dat.query("visitors > 0")['visit_date'].min()

def get_latest_date(dat):
    return dat.query("visitors > 0")['visit_date'].max()


#export
class VisitsSurveyor:
    def __init__(self, visits: core.pd.DataFrame, make_report: bool):
        self.make_report = make_report
        self.visits = visits
        self.assign_never_visited()
        self.filter_zero_periods()
        self.count_visited_days()

    def report(self, s: str) -> None:
        if self.make_report:
            if issubclass(type(s), core.pd.DataFrame):
                display(s)
            else:
                print(s)

    def assign_never_visited(self) -> None:
        self.store_counts = self.visits.groupby('air_store_id').visitors.sum()
        self.never_visited = self.store_counts[self.store_counts == 0]
        self.report("The visits data looks like this:")
        self.report(self.visits.head())
        self.report(" ")
        self.report(f"There are {len(self.store_counts)} stores.")
        self.report(f"{len(self.never_visited)} stores had no visits ever.")

    def filter_zero_periods(self) -> None:
        self.daily_total_visits = (
            self.visits
            [['visit_date', 'visitors']]
            .groupby('visit_date')
            .sum()
            .reset_index())
        earliest_day = get_earliest_date(self.daily_total_visits)
        latest_day = get_latest_date(self.daily_total_visits)
        self.visits = self.visits[
            (self.visits.visit_date >= earliest_day) &
            (self.visits.visit_date <= latest_day)]
        self.report(f"Populated data is from {earliest_day} to {latest_day}.")

    def count_visited_days(self) -> None:
        self.visited_days_counts = (
            self.visits[self.visits.visitors > 0].
            groupby('air_store_id')['visitors'].
            count().
            reset_index(name='days_visited'))
        hist = (
            pn.ggplot(self.visited_days_counts, pn.aes(x='days_visited')) +
            pn.geom_histogram(bins=60) +
            pn.theme_bw() +
            pn.labs(x = "days visited", y = "count restaurants") +
            pn.theme(figure_size=(13, 3)))
        if self.make_report:
            self.report("")
            self.report("Visited days per restaurant:")
            display(hist)

    def get_populated_spans(self) -> core.pd.DataFrame:
        rows = []
        for store_id, df in self.visits.groupby('air_store_id'):
            earliest_day = get_earliest_date(df)
            latest_day = get_latest_date(df)
            row = (store_id, earliest_day, latest_day)
            rows.append(row)
        return core.pd.DataFrame(rows, columns=['air_store_id', 'earliest_visit_date', 'latest_visit_date'])


# Cell
vs = VisitsSurveyor(core.data['visits'], False)
populated_store_id = vs.visited_days_counts.sort_values(by='days_visited', ascending=False).air_store_id[0]